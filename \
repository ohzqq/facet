package facet

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/url"

	"github.com/spf13/cast"
)

func Filter(data []map[string]any, cfg map[string]any, filters url.Values) ([]map[string]any, map[string]any) {
	idx := &Index{
		Data: data,
	}
	if f, ok := cfg["facets"]; ok {
		idx.FacetCfg = parseFacetMap(f)
	}
	if key, ok := cfg["key"]; ok {
		idx.Key = cast.ToString(key)
	}
	idx.Facets()
	fmt.Printf("%#v\n", idx)
	return data, cfg
}

func parseFilters(f any) (url.Values, error) {
	filters := make(url.Values)
	switch val := f.(type) {
	case []byte:
		filters := make(url.Values)
		err := json.Unmarshal(val, &filters)
		if err != nil {
			return nil, err
		}
		return filters, nil
	case map[string][]string:
		return url.Values(val), nil
	case url.Values:
		return val, nil
	default:
		return cast.ToStringMapStringSliceE(val)
	}
	return nil, errors.New("filters couldn't be parsed")
}
